import { Request, Response } from "express";
import User from "../models/user.model";
import UserRepository from "../repository/user.repository";
import bcrypt from "bcrypt"
import AuthRepository
 from "../repository/auth.repository";


class UserController {
    private userRepository: UserRepository;
    private auth: AuthRepository;

    constructor() {
        this.userRepository = new UserRepository();
        this.auth = new AuthRepository();

        // Bind context to ensure 'this' refers to the class instance
        this.create = this.create.bind(this);
        this.userByEmail = this.userByEmail.bind(this);
    }

    create = async (req: Request, res: Response) => {
        try {
            // Validate request body
            const { name, email, password, avatar } = req.body;
            if (!name || !email || !password) { // Basic validation
                return res.status(400).json({ message: "Missing required fields" });
            }

            // Create user using UserRepository
            const newUser = await this.userRepository.create({ // assuming id is auto-generated by the database
                name,
                email,
                password, // Store the plain password, UserRepository will handle the hashing
                avatar
            });

            return res.status(201).json(newUser);
        } catch (error) {
            console.error("Error creating user:", error);
            return res.status(500).json({ message: "Failed to create user" });
        }
    };

    async userByEmail(req: Request, res: Response): Promise<void> {
        try {
          const { email } = req.body;
          const user = await this.userRepository.userByEmail(email);
          if (user) {
            res.status(200).json(user);
          } else {
            res.status(404).json({ message: 'User not found' });
          }
        } catch (error) {
          console.error(error);
          res.status(500).json({ message: 'Internal Server Error' });
        }
      }
    
 

        
}

export default UserController